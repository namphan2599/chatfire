{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummyScroll","useRef","messagesRef","collection","query","orderBy","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","console","log","map","message","id","ref","onSubmit","value","onChange","target","type","ChatMessage","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAWAA,IAASC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGnB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAoB3B,IAAMC,EAAS,WAQb,OACI,wBAAQC,QAPa,WAErB,IAAMC,EAAW,IAAId,IAASU,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAIrB,kCAIAG,EAAU,WACd,OAAOP,EAAKQ,aACV,wBAAQL,QAAU,kBAAMH,EAAKS,WAA7B,uBAIEC,EAAW,WAEf,IAAMC,EAAcC,mBAEdC,EAAcZ,EAAUa,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aALb,EAOFC,YAAkBF,EAAO,CAAEG,QAAS,OAAhDC,EAPc,sBASaC,mBAAS,IATtB,mBASdC,EATc,KASHC,EATG,KAWfC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAIS1B,EAAKQ,YAAvBmB,EAJS,EAITA,IAAKC,EAJI,EAIJA,SAJI,SAQZf,EAAYgB,IAAI,CACpBC,KAAMT,EACNU,UAAWzC,IAASW,UAAU+B,WAAWC,kBACzCN,MACAC,aAZgB,OAelBN,EAAa,IAEbX,EAAYuB,QAAQC,eAAe,CAAEC,SAAU,WAE/CC,QAAQC,IAAI3B,GAnBM,2CAAH,sDAuBjB,OACE,qCACE,iCACIQ,GAAYA,EAASoB,KAAI,SAAAC,GAAO,OAAI,cAAC,EAAD,CAA8BA,QAASA,GAArBA,EAAQC,OAEhE,qBAAKC,IAAK/B,OAGZ,uBAAMgC,SAAUpB,EAAhB,UACE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,UAChE,wBAAQG,KAAK,SAAb,2BAOFC,EAAc,SAACC,GAAW,IAAD,EAEEA,EAAMT,QAA7BV,EAFqB,EAErBA,KAAMH,EAFe,EAEfA,IAAKC,EAFU,EAEVA,SAEbsB,EAAevB,IAAQ3B,EAAKQ,YAAYmB,IAAM,OAAS,WAE7D,OACE,sBAAKwB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKxB,GAAY,0DACtB,4BAAIE,QAMKuB,EAvGf,WAAgB,IAAD,EAEEC,YAAatD,GAArBuD,EAFM,oBAIb,OACE,sBAAKJ,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,8CACA,cAAC,EAAD,OAEF,kCACMI,EAAO,cAAC,EAAD,IAAe,cAAC,EAAD,UCxBnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b4cc7744.chunk.js","sourcesContent":["import { useRef, useState } from 'react';\n\nimport './App.css';\n\nimport firebase  from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyCMKmtCPMDelxBX2yo4cFWtWIlU_egZMcI\",\n    authDomain: \"awsome-chatbase.firebaseapp.com\",\n    databaseURL: \"https://awsome-chatbase.firebaseio.com\",\n    projectId: \"awsome-chatbase\",\n    storageBucket: \"awsome-chatbase.appspot.com\",\n    messagingSenderId: \"424751183448\",\n    appId: \"1:424751183448:web:de36d26e56d6ec0815fc2d\",\n    measurementId: \"G-4GYYPYPN5Y\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"> \n        <h1>⚛️</h1>\n        <SignOut />\n      </header>\n      <section>\n          { user ? <ChatRoom /> : <SignIn /> }\n        </section>\n    </div>\n  );\n}\n\n\nconst SignIn = () => {\n\n  const signInWithGoogle = () => {\n    //for popup window login\n      const provider = new firebase.auth.GoogleAuthProvider();\n      auth.signInWithPopup(provider);\n  }\n\n  return (\n      <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nconst SignOut = () => {\n  return auth.currentUser && (\n    <button onClick={ () => auth.signOut() }>Sign Out</button>\n  )\n}\n\nconst ChatRoom = () => {\n\n  const dummyScroll = useRef();\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt');\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n\n    const  { uid, photoURL } = auth.currentUser;\n\n    // create new document in firestore\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n\n    dummyScroll.current.scrollIntoView({ behavior: 'smooth' });\n\n    console.log(dummyScroll)\n\n  }\n\n  return (\n    <>\n      <main>\n        { messages && messages.map(message => <ChatMessage key={message.id} message={message} />)}\n\n        <div ref={dummyScroll}></div>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)}/>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </>\n  )\n}\n\n\nconst ChatMessage = (props) => {\n\n  const { text, uid, photoURL} = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}